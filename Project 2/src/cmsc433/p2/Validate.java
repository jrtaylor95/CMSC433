package cmsc433.p2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import cmsc433.p2.SimulationEvent;


/**
 * Validates a simulation
 */
public class Validate {
	private static class InvalidSimulationException extends Exception {
		public InvalidSimulationException() { }
	};

	// Helper method for validating the simulation
	private static void check(boolean check,
			String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : "+message);
			throw new Validate.InvalidSimulationException();
		}
	}

	/** 
	 * Validates the given list of events is a valid simulation.
	 * Returns true if the simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation
	 *   in the order they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 */
	public static boolean validateSimulation(List<SimulationEvent> events) {
		try {
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size()-1).event == 
					SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");

			/* In P2 you will write validation code for things such as:
				Should not have more eaters than specified
				Should not have more cooks than specified
				The Ratsie's capacity should not be exceeded
				The capacity of each machine should not be exceeded
				Eater should not receive order until cook completes it
				Eater should not leave Ratsie's until order is received
				Eater should not place more than one order
				Cook should not work on order before it is placed
			 */

			int maxRatsiesCapacity = 0;
			int maxMachineCapacity = 0;
			int numEaters = 0;
			int numCooks = 0;
			int numMachines = 0;

			ArrayList<Customer> presentCustomers = new ArrayList<Customer>();
			ArrayList<Customer> customerPlaced = new ArrayList<Customer>();
			ArrayList<Customer> customerReceived = new ArrayList<Customer>();
			ArrayList<Customer> waitingCustomers = new ArrayList<Customer>();
			HashMap<Integer, List<Food>> placedOrders = new HashMap<Integer, List<Food>>();
			HashMap<Integer, List<Food>> inProgressOrders = new HashMap<Integer, List<Food>>();
			ArrayList<Integer> completedOrders = new ArrayList<Integer>();
			List<Food> order;
			for (SimulationEvent event : events.subList(1, events.size() - 1)) {
				switch (event.event) {
				/* Customer events */
				case CustomerStarting:
					numEaters++;
					break;
				case CustomerEnteredRatsies:
					presentCustomers.add(event.customer);
					waitingCustomers.add(event.customer);
		
					check(presentCustomers.size() <= events.get(0).simParams[2], "Customer broke in " + presentCustomers.toString() + " number of tables " + events.get(0).simParams[2] + " " + presentCustomers.size());
					break;
				case CustomerPlacedOrder:
					check(waitingCustomers.contains(event.customer), "Customer broke in and placed order");
					waitingCustomers.remove(event.customer);
					
					customerPlaced.add(event.customer);
					placedOrders.put(event.orderNumber, event.orderFood);
					break;
				case CustomerReceivedOrder:
					check(completedOrders.contains(event.orderNumber), "Order " + event.orderNumber + " was not completed");
					completedOrders.remove(Integer.valueOf(event.orderNumber));
					
					customerPlaced.remove(event.customer);
					customerReceived.add(event.customer);
					break;
				case CustomerLeavingRatsies:
					check(customerReceived.contains(event.customer), "Customer left angry");
					customerReceived.remove(event.customer);
					presentCustomers.remove(event.customer);
					break;
					/* Cook Events */
				case CookStarting:
					numCooks++;
					break;
				case CookReceivedOrder:
					order = placedOrders.remove(event.orderNumber);
					check(order != null, "Order was not placed");
					inProgressOrders.put(event.orderNumber, event.orderFood);
					break;
				case CookStartedFood:
					break;
				case CookFinishedFood:
					break;
				case CookCompletedOrder:
					order = inProgressOrders.remove(event.orderNumber);
					check(order != null, "Food was not in progress");
					completedOrders.add(event.orderNumber);
					break;
				case CookEnding:
					numCooks--;
					break;
					/* Machine events */
				case MachineStarting:
					numMachines++;
					break;
				case MachineStartingFood:
					maxMachineCapacity++;
					check(maxMachineCapacity <= 4, "too much food " + maxMachineCapacity);
					break;
				case MachineDoneFood:
					maxMachineCapacity--;
					break;
				case MachineEnding:
					numMachines--;
					break;
				default:
					break;
				}
			}
			
			//Check customer sanity
			check(waitingCustomers.isEmpty(), "Customers kept waiting");
			
			check(customerPlaced.isEmpty(), "Customer didn't receive order");
			
			check(customerReceived.isEmpty(), "Customer didn't leave");
			
			//Check order sanity
			
			if (!placedOrders.isEmpty())
				return false;
			
			if (!inProgressOrders.isEmpty())
				return false;
			
			if (!completedOrders.isEmpty())
				return false;
			
			if (numCooks != 0)
				return false;
			
			if (numMachines != 0)
				return false;
			
			if (maxMachineCapacity != 0)
				return false;
			
			
			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}
	}
}
